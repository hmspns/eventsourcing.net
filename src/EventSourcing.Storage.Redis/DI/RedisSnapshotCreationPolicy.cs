namespace EventSourcing.Storage.Redis;

/// <summary>
/// Policy how to create snapshot.
/// </summary>
public sealed class RedisSnapshotCreationPolicy
{
    /// <summary>
    /// General behavior how to create snapshot.
    /// </summary>
    public RedisSnapshotCreationBehaviour Behaviour { get; set; } = RedisSnapshotCreationBehaviour.EveryCommit;
    
    /// <summary>
    /// The number of commits after which the snapshot will be created.
    /// </summary>
    /// <remarks>This property affects only when Behaviour set to RedisSnapshotCreationBehaviour.ThresholdCommit.</remarks>
    public int CommitThreshold { get; set; } = 10;
    
    /// <summary>
    /// When snapshots should expire. TimeSpan.Zero means no expiration.
    /// </summary>
    public TimeSpan ExpireAfter { get; set; } = TimeSpan.Zero;

    public int MinAggregateVersion { get; set; } = 0;

    /// <summary>
    /// Prefix for the keys generated by RedisSnapshotStore.
    /// </summary>
    /// <remarks>
    /// RedisSnapshotStore store data in string redis type to provide expiration.
    /// Key will look like {KeyPrefix}|{TenantId}|{AggregateId} if TenantId not equal to TenantId.Empty.
    /// Key will look like {KeyPrefix}|{AggregateId} if TenantId equal to TenantId.Empty.
    /// </remarks>
    public string KeyPrefix { get; set; } = "es";
}

/// <summary>
/// Behaviour how to create snapshots.
/// </summary>
public enum RedisSnapshotCreationBehaviour
{
    /// <summary>
    /// Snapshot should be created on every commit.
    /// </summary>
    EveryCommit,
    /// <summary>
    /// Snapshot should be created when threshold will be reached.
    /// </summary>
    ThresholdCommit
}