<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="SaveHelpers.ttinclude" once="true"#>
<#@ include file="IdentitiesConfigParser.ttinclude" once="true"#>
<#
    void WriteIntBased(DataItem[] data)
    {
        foreach (DataItem item in data)
        {
#>
// <auto-generated />
using System;
using EventSourcing.Net.Abstractions.Contracts;

namespace EventSourcing.Abstractions.Identities
{
    /// <summary>
    /// <#= item.Comment #>.
    /// </summary>
    /// <remarks>Generated from EventSourcing.CodeGeneration.Identities.tt</remarks>
    public <#=
                item.IsPartial ? "readonly partial" : "readonly" #> struct <#= item.Name #> : IIdentity, IEquatable<<#= item.Name #>>
    {
        private readonly int _id;

        /// <summary>
        /// Get the prefix.
        /// </summary>
        public static readonly string Prefix = "<#= item.Prefix #>_";

        /// <summary>
        /// Get empty <#= item.Name #>.
        /// </summary>
        public static readonly <#= item.Name #> Empty = new <#= item.Name #>(default(int));

        /// <summary>
        /// Initiate new object.
        /// </summary>
        public <#= item.Name #>(int id)
        {
            _id = id;
        }

        /// <summary>
        /// Parse from string.
        /// </summary>
        /// <param name="serializedId">String value.</param>
        /// <returns><#= item.Comment #>.</returns>
        /// <exception cref="ArgumentException">String cannot be parsed to <#= item.Name #>.</exception>
        public static <#= item.Name #> Parse(string serializedId)
        {
            if (!serializedId.StartsWith(Prefix, StringComparison.Ordinal))
            {
                throw new ArgumentException("Invalid <#= item.Name #>", "serializedId");
            }

            ReadOnlySpan<char> span = serializedId.AsSpan();
            int id = int.Parse(span.Slice(Prefix.Length));

            return new <#= item.Name #>(id);
        }

        /// <summary>
        /// Parse from string without throwing exception.
        /// </summary>
        /// <param name="serializedId">String value.</param>
        /// <param name="id">Parsed <#= item.Name #>.</param>
        /// <returns>True if parsed successfully, otherwise false.</returns>
        public static bool TryParse(string serializedId, out <#= item.Name #> id)
        {
            int value;

            if (!string.IsNullOrWhiteSpace(serializedId) && serializedId.StartsWith(Prefix, StringComparison.Ordinal))
            {
                ReadOnlySpan<char> span = serializedId.AsSpan().Slice(Prefix.Length);
                if (int.TryParse(span, out value))
                {
                    id = new <#= item.Name #>(value);
                    return true;
                }
            }

            id = default(<#= item.Name #>);
            return false;
        }

        /// <summary>
        /// Get internal id.
        /// </summary>
        public int Id => _id;

        public static implicit operator int(<#= item.Name #> id)
        {
            return id._id;
        }

        public static implicit operator <#= item.Name #>(int id)
        {
            return new <#= item.Name #>(id);
        }

        public override string ToString()
        {
            return string.Concat(Prefix, _id.ToString());
        }

        public bool Equals(<#= item.Name #> other) { return _id == other._id; }

        public override bool Equals(object other)
        {
            if ((other == null) || !(other is <#= item.Name #>)) 
            {
                return false;
            }

            return this.Equals((<#= item.Name #>)other);
        }

        public override int GetHashCode() { return _id.GetHashCode(); }

        public static bool operator ==(<#= item.Name #> a, <#= item.Name #> b) { return a._id == b._id; }
        public static bool operator !=(<#= item.Name #> a, <#= item.Name #> b) { return a._id != b._id; }
    }
}
<#
            SaveFile("Identities", item.Name, this.GenerationEnvironment.ToString());
            this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
        }
    }
#>