// <auto-generated />
using System;
using EventSourcing.Abstractions.Identities;

namespace EventSourcing.Abstractions.Contracts
{
    /// <summary>
    /// Generic interface for all identities.
    /// </summary>
    public interface IIdentity
    {
        /// <summary>
        /// Parse from string.
        /// </summary>
        /// <param name="raw">Prefixed string.</param>
        /// <returns>Identity with correct type.</returns>
        /// <exception cref="ArgumentNullException">Passed null value.</exception>
        /// <exception cref="ArgumentOutOfRangeException">Prefix couldn't be found.</exception>
        static IIdentity Parse(string raw)
        {
            IIdentity result = raw switch
            {
                null => throw new ArgumentNullException(nameof(raw)),
                var s when s.StartsWith("command_", StringComparison.Ordinal) => CommandId.Parse(raw),
                var s when s.StartsWith("command-sequence_", StringComparison.Ordinal) => CommandSequenceId.Parse(raw),
                var s when s.StartsWith("event_", StringComparison.Ordinal) => EventId.Parse(raw),
                var s when s.StartsWith("principal_", StringComparison.Ordinal) => PrincipalId.Parse(raw),
                var s when s.StartsWith("tenant_", StringComparison.Ordinal) => TenantId.Parse(raw),
                _ => throw new ArgumentOutOfRangeException(nameof(raw), raw, "Raw is null")
            };
            return result;
        }

        /// <summary>
        /// Parse from string.
        /// </summary>
        /// <param name="raw">Prefixed string.</param>
        /// <param name="identity">Parsed identity with the correct type.</param>
        /// <returns>True if parsed successfully, otherwise false.</returns>
        /// <exception cref="ArgumentNullException">Passed null value.</exception>
        static bool TryParse(string raw, out IIdentity identity)
        {
            try
            {
                identity = raw switch
                {
                    null => throw new ArgumentNullException(nameof(raw)),
                    var s when s.StartsWith("command_") => CommandId.Parse(raw),
                    var s when s.StartsWith("command-sequence_") => CommandSequenceId.Parse(raw),
                    var s when s.StartsWith("event_") => EventId.Parse(raw),
                    var s when s.StartsWith("principal_") => PrincipalId.Parse(raw),
                    var s when s.StartsWith("tenant_") => TenantId.Parse(raw),
                    _ => default
                };
                if (identity != default)
                {
                    return true;
                }
            }
            catch
            {
                identity = default;
            }

            return false;
        }

        /// <summary>
        /// Get identity from stream id.
        /// </summary>
        /// <param name="streamId">Stream id.</param>
        /// <returns>Type identity.</returns>
        static IIdentity FromStreamId(StreamId streamId)
        {
            return IIdentity.Parse(streamId.ToString());
        }
    }
}

